trigger:
  branches:
    include:
      - develop
      - master
pr:
  branches:
    include:
      - master
      - develop

pool:
  name: $(poolName)

steps:
  - task: UsePythonVersion@0
    displayName: 'Use Python 3.7'
    inputs:
      versionSpec: '3.7'
      addToPath: true
  - task: GoTool@0
    displayName: 'Install GO'
    inputs:
      version: '1.15.2'
  - task: CmdLine@2
    displayName: 'Install Dependencies'
    inputs:
      script: |
        curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        mv ./kubectl /usr/local/bin/kubectl
  - task: Go@0
    displayName: 'Get go-junit-report plugin'
    inputs:
      command: 'get'
      arguments: '-u github.com/jstemmer/go-junit-report'
  - task: Bash@3
    displayName: 'Prepend PATH'
    inputs:
      targetType: 'inline'
      script: |
        echo "##vso[task.prependpath]/tools/go/1.15.2/x64/bin"
      failOnStderr: true
  - task: Bash@3
    displayName: 'Set Build Variables'
    inputs:
      targetType: 'inline'
      script: |
        echo "##vso[task.setvariable variable=MAJOR_VERSION]$(make print-VERSION)"
        echo "##vso[task.setvariable variable=REPOSITORY_NAME]$(make print-USER)"
        echo "##vso[task.setvariable variable=IMAGE_NAME]$(make print-IMAGE)"
        echo "##vso[task.setvariable variable=PATH]$(echo $GOPATH:$GOBIN:$PATH)"
  - task: Docker@2
    displayName: Login to registry
    inputs:
      command: login
      containerRegistry: $(registry_name)
  - task: Bash@3
    displayName: 'Run Tests'
    inputs:
      targetType: 'inline'
      script: |
        cd $WORK_DIR
        echo "Start make test"
        make test 2>&1 | tee tests.output
        go-junit-report < tests.output > report.xml
        docker tag $(REPOSITORY_NAME)/$(IMAGE_NAME):$(MAJOR_VERSION) $(registry_name)/$(REPOSITORY_NAME)/$(IMAGE_NAME):$(MAJOR_VERSION).$(Build.BuildId)
      failOnStderr: true
    env:
      CLIENT_SECRET: $(clientSecret)
      WORK_DIR: $(System.DefaultWorkingDirectory)
      K8S_HOST_PATH: "/tmp/tests-share/$(IMAGE_NAME)"
      K8S_VOL_PATH: "/tests-share/$(IMAGE_NAME)"
      AWS_ACCESS_KEY: $(AWS_ACCESS_KEY)
      AWS_SECRET_KEY: $(AWS_SECRET_KEY)
      AWSKS_IMAGE_TAG: $(REPOSITORY_NAME)/$(IMAGE_NAME):$(MAJOR_VERSION)
      AWSBI_IMAGE_TAG: $(AWSBI_IMAGE_TAG)
      M_NAME: $(M_NAME_PREFIX)-$(Build.BuildId)
      M_REGION: $(M_REGION)
  - task: CmdLine@2
    displayName: 'Cleanup Local Image'
    inputs:
      script: |
        echo "Removing image"
        echo "---------------------------------------------------------------"
        docker rmi $(REPOSITORY_NAME)/$(IMAGE_NAME):$(MAJOR_VERSION) --force
  - task: PublishTestResults@2
    inputs:
      testRunner: JUnit
      testResultsFiles: $(System.DefaultWorkingDirectory)/**/report.xml
      failTaskOnFailedTests: true
  - task: Docker@2
    displayName: 'Push Image'
    inputs:
      containerRegistry: $(registry_name)
      command: push
      repository: $(REPOSITORY_NAME)/$(IMAGE_NAME)
      tags: $(MAJOR_VERSION).$(Build.BuildId)
  - task: CmdLine@2
    displayName: 'Cleanup Local Image'
    inputs:
      script: |
        echo "Removing image"
        echo "---------------------------------------------------------------"
        docker rmi $(registry_name)/$(REPOSITORY_NAME)/$(IMAGE_NAME):$(MAJOR_VERSION).$(Build.BuildId)
